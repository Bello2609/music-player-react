{"version":3,"sources":["components/Player.js","components/Song.js","components/LibrarySong.js","components/Library.js","components/Nav.js","data.js","App.js","index.js"],"names":["Player","currentSong","setCurrentSong","isPlaying","setIsPlaying","audioRef","setSongInfo","songInfo","songs","setSongs","useState","volume","setVolume","isMuted","setIsMuted","prevVolumeValue","setPrevVolumeValue","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","skipTrackHandler","direction","a","currentIndex","findIndex","length","current","play","trackAnim","track","transform","animationPercentage","trackBackground","background","color","volumeBackground","getTime","time","Math","floor","slice","className","style","type","min","max","duration","value","onChange","e","currentTime","target","onClick","size","icon","faAngleLeft","faPause","faPlay","pause","faAngleRight","volumeLevel","width","faVolumeMute","faVolumeUp","Song","alt","name","src","cover","artist","LibrarySong","songSelectHandler","Library","libraryStatus","Nav","setLibraryStatus","faMusic","chillHop","audio","uuidv4","App","useRef","data","timeUpdateHandler","roundedCurrent","round","roundedDuration","onTrackEndHandler","ref","onTimeUpdate","onLoadedMetadata","onEnded","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.898f58d9.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faPlay,\r\n    faAngleLeft,\r\n    faAngleRight,\r\n    faPause,\r\n    faVolumeUp,\r\n    faVolumeMute,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { useState } from 'react';\r\n\r\nconst Player = ({\r\n    currentSong,\r\n    setCurrentSong,\r\n    isPlaying,\r\n    setIsPlaying,\r\n    audioRef,\r\n    setSongInfo,\r\n    songInfo,\r\n    songs,\r\n    setSongs,\r\n}) => {\r\n    const [volume, setVolume] = useState(60);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const [prevVolumeValue, setPrevVolumeValue] = useState(volume);\r\n\r\n    const activeLibraryHandler = (nextPrev) => {\r\n        const newSongs = songs.map((song) => {\r\n            if (song.id === nextPrev.id) {\r\n                return {\r\n                    ...song,\r\n                    active: true,\r\n                };\r\n            } else {\r\n                return {\r\n                    ...song,\r\n                    active: false,\r\n                };\r\n            }\r\n        });\r\n\r\n        setSongs(newSongs);\r\n    };\r\n\r\n    /* EventHandlers */\r\n    const playSongHandler = () => {\r\n        if (isPlaying) {\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        } else {\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    };\r\n\r\n    const dragHandler = (e) => {\r\n        audioRef.current.currentTime = e.target.value;\r\n        setSongInfo({ ...songInfo, current: e.target.value });\r\n    };\r\n\r\n    const skipTrackHandler = async (direction) => {\r\n        let currentIndex = songs.findIndex(\r\n            (song) => song.id === currentSong.id\r\n        );\r\n\r\n        if (direction === 'skip-forward') {\r\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\r\n        }\r\n        if (direction === 'skip-back') {\r\n            if ((currentIndex - 1) % songs.length === -1) {\r\n                await setCurrentSong(songs[songs.length - 1]);\r\n                activeLibraryHandler(songs[songs.length - 1]);\r\n                if (isPlaying) audioRef.current.play();\r\n                return;\r\n            }\r\n            await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\r\n        }\r\n        if (isPlaying) audioRef.current.play();\r\n    };\r\n\r\n    const onVolumeClickHandler = () => {\r\n        debugger;\r\n        if (isMuted) {\r\n            audioRef.current.volume = prevVolumeValue / 100;\r\n            setVolume(prevVolumeValue);\r\n            setIsMuted(false);\r\n        } else {\r\n            audioRef.current.volume = 0;\r\n            setIsMuted(true);\r\n            setPrevVolumeValue(volume);\r\n            setVolume(0);\r\n        }\r\n    };\r\n\r\n    const onVolumeChangeHandler = (e) => {\r\n        const volumeLevel = e.target.value / 100;\r\n\r\n        audioRef.current.volume = volumeLevel;\r\n\r\n        setVolume(e.target.value);\r\n    };\r\n\r\n    const trackAnim = {\r\n        track: {\r\n            transform: `translateX(${songInfo.animationPercentage}%)`,\r\n        },\r\n        volume: {\r\n            transform: `translateX(${volume}%)`,\r\n        },\r\n    };\r\n\r\n    const trackBackground = {\r\n        background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\r\n    };\r\n    const volumeBackground = {\r\n        background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\r\n    };\r\n\r\n    /* Functions */\r\n    const getTime = (time) => {\r\n        return (\r\n            Math.floor(time / 60) +\r\n            ':' +\r\n            ('0' + Math.floor(time % 60)).slice(-2)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.current)}</p>\r\n                <div style={trackBackground} className=\"track\">\r\n                    <input\r\n                        type=\"range\"\r\n                        min={1}\r\n                        max={songInfo.duration || 0}\r\n                        value={songInfo.current}\r\n                        onChange={dragHandler}\r\n                    />\r\n                    <div\r\n                        style={trackAnim.track}\r\n                        className=\"animate-track\"\r\n                    ></div>\r\n                </div>\r\n\r\n                <p>{songInfo.duration ? getTime(songInfo.duration) : '0:00'}</p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                <FontAwesomeIcon\r\n                    className=\"skip-back\"\r\n                    onClick={() => skipTrackHandler('skip-back')}\r\n                    size=\"2x\"\r\n                    icon={faAngleLeft}\r\n                />\r\n                <FontAwesomeIcon\r\n                    className=\"play\"\r\n                    size=\"2x\"\r\n                    icon={isPlaying ? faPause : faPlay}\r\n                    onClick={playSongHandler}\r\n                />\r\n                <FontAwesomeIcon\r\n                    className=\"skip-forward\"\r\n                    onClick={() => skipTrackHandler('skip-forward')}\r\n                    size=\"2x\"\r\n                    icon={faAngleRight}\r\n                />\r\n                <div className=\"track-volume\" style={volumeBackground}>\r\n                    <input\r\n                        type=\"range\"\r\n                        min={0}\r\n                        max={100}\r\n                        onChange={onVolumeChangeHandler}\r\n                        value={volume}\r\n                    />\r\n                    <div\r\n                        style={trackAnim.volume}\r\n                        className=\"animate-volume\"\r\n                    ></div>\r\n                </div>\r\n                <div style={{ width: '18px' }}>\r\n                    <FontAwesomeIcon\r\n                        onClick={onVolumeClickHandler}\r\n                        className={'volume'}\r\n                        icon={isMuted ? faVolumeMute : faVolumeUp}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;\r\n","const Song = ({ currentSong }) => {\r\n    return (\r\n        <div className=\"song-container\">\r\n            <img alt={currentSong.name} src={currentSong.cover} />\r\n            <h2>{currentSong.name}</h2>\r\n            <h3>{currentSong.artist}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Song;\r\n","const LibrarySong = ({\r\n    song,\r\n    songs,\r\n    setSongs,\r\n    id,\r\n    setCurrentSong,\r\n    audioRef,\r\n    isPlaying,\r\n}) => {\r\n    const songSelectHandler = async () => {\r\n        setCurrentSong(song);\r\n\r\n        const newSongs = songs.map((song) => {\r\n            if (song.id === id) {\r\n                return {\r\n                    ...song,\r\n                    active: true,\r\n                };\r\n            } else {\r\n                return {\r\n                    ...song,\r\n                    active: false,\r\n                };\r\n            }\r\n        });\r\n\r\n        await setSongs(newSongs);\r\n\r\n        if (isPlaying) audioRef.current.play();\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onClick={songSelectHandler}\r\n            className={`library-song ${song.active ? 'selected' : ''}`}\r\n        >\r\n            <img alt={song.name} src={song.cover} />\r\n            <div className=\"song-description\">\r\n                <h3>{song.name}</h3>\r\n                <h4>{song.artist}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LibrarySong;\r\n","import LibrarySong from './LibrarySong';\r\n\r\nconst Library = ({\r\n    songs,\r\n    setSongs,\r\n    setCurrentSong,\r\n    audioRef,\r\n    isPlaying,\r\n    libraryStatus,\r\n}) => {\r\n    return (\r\n        <div className={`library ${libraryStatus ? 'active-library' : ''}`}>\r\n            <h2>Library</h2>\r\n            <div className=\"library-songs\">\r\n                {songs.map((song) => (\r\n                    <LibrarySong\r\n                        key={song.id}\r\n                        song={song}\r\n                        songs={songs}\r\n                        id={song.id}\r\n                        setSongs={setSongs}\r\n                        setCurrentSong={setCurrentSong}\r\n                        audioRef={audioRef}\r\n                        isPlaying={isPlaying}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Library;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Nav = ({ libraryStatus, setLibraryStatus }) => {\r\n    return (\r\n        <nav>\r\n            <h1>Waves</h1>\r\n            <button onClick={() => setLibraryStatus(!libraryStatus)}>\r\n                Library <FontAwesomeIcon icon={faMusic} />\r\n            </button>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import { v4 as uuidv4 } from 'uuid';\r\nfunction chillHop() {\r\n    return [\r\n        {\r\n            name: 'Beaver Creek',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg',\r\n            artist: 'Aso, Middle School, Aviino',\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=10075',\r\n            color: ['#205950', '#2ab3bf'],\r\n            id: uuidv4(),\r\n            active: true,\r\n        },\r\n        {\r\n            name: 'Daylight',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg',\r\n            artist: 'Aiguille',\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=9272',\r\n            color: ['#EF8EA9', '#ab417f'],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: 'Keep Going',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg',\r\n            artist: 'Swørn',\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=9222',\r\n            color: ['#CD607D', '#c94043'],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: 'Nightfall',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg',\r\n            artist: 'Aiguille',\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=9148',\r\n            color: ['#EF8EA9', '#ab417f'],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: 'Reflection',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg',\r\n            artist: 'Swørn',\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=9228',\r\n            color: ['#CD607D', '#c94043'],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: 'Under the City Stars',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg',\r\n            artist: 'Aso, Middle School, Aviino',\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=10074',\r\n            color: ['#205950', '#2ab3bf'],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: 'Jazz Cabbage',\r\n            artist: 'Ian Ewing, Strehlow',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/06/49f6e32ca521fbad46a1b281e3893cf6254bf11d-1024x1024.jpg',\r\n            id: uuidv4(),\r\n            active: false,\r\n            color: ['#BC4F49', '#FDF0DE'],\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=9363',\r\n        },\r\n        {\r\n            name: 'Lagoons',\r\n            artist: 'Strehlow, Chris Mazuera',\r\n            cover:\r\n                'https://chillhop.com/wp-content/uploads/2020/06/49f6e32ca521fbad46a1b281e3893cf6254bf11d-1024x1024.jpg',\r\n            id: uuidv4(),\r\n            active: false,\r\n            color: ['#BC4F49', '#FDF0DE'],\r\n            audio: 'https://mp3.chillhop.com/serve.php/?mp3=8266',\r\n        },\r\n        //ADD MORE HERE\r\n    ];\r\n}\r\n\r\nexport default chillHop;\r\n","import { useState, useRef } from 'react';\n\nimport Player from './components/Player';\nimport Song from './components/Song';\nimport Library from './components/Library';\nimport Nav from './components/Nav';\n\nimport './styles/app.scss';\nimport data from './data';\n\nfunction App() {\n    /* Ref */\n    const audioRef = useRef(null);\n\n    const [songs, setSongs] = useState(data());\n    const [currentSong, setCurrentSong] = useState(songs[0]);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [songInfo, setSongInfo] = useState({\n        current: 0,\n        duration: 0,\n        animationPercentage: 0,\n    });\n    const [libraryStatus, setLibraryStatus] = useState(false);\n\n    const timeUpdateHandler = (e) => {\n        const current = e.target.currentTime;\n        const duration = e.target.duration;\n\n        const roundedCurrent = Math.round(current);\n        const roundedDuration = Math.round(duration);\n\n        const animationPercentage = Math.round(\n            (roundedCurrent / roundedDuration) * 100\n        );\n\n        setSongInfo({\n            ...songInfo,\n            current,\n            duration,\n            animationPercentage,\n        });\n    };\n\n    const onTrackEndHandler = async () => {\n        let currentIndex = songs.findIndex(\n            (song) => song.id === currentSong.id\n        );\n\n        await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n\n        if (isPlaying) audioRef.current.play();\n    };\n\n    return (\n        <div className={`App ${libraryStatus ? 'library-active' : ''}`}>\n            <Nav\n                libraryStatus={libraryStatus}\n                setLibraryStatus={setLibraryStatus}\n            />\n            <Song currentSong={currentSong} />\n            <Player\n                setIsPlaying={setIsPlaying}\n                isPlaying={isPlaying}\n                currentSong={currentSong}\n                setCurrentSong={setCurrentSong}\n                songs={songs}\n                audioRef={audioRef}\n                setSongInfo={setSongInfo}\n                songInfo={songInfo}\n                setSongs={setSongs}\n            />\n            <Library\n                libraryStatus={libraryStatus}\n                songs={songs}\n                setCurrentSong={setCurrentSong}\n                audioRef={audioRef}\n                isPlaying={isPlaying}\n                setSongs={setSongs}\n            />\n            <audio\n                ref={audioRef}\n                onTimeUpdate={timeUpdateHandler}\n                onLoadedMetadata={timeUpdateHandler}\n                src={currentSong.audio}\n                onEnded={onTrackEndHandler}\n            ></audio>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}